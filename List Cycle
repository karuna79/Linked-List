Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

ListNode* Solution::detectCycle(ListNode* A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

    ListNode* slow=A; ListNode* fast=A;
while(fast && fast->next)
{
    slow=slow->next;
    fast=fast->next->next;
    if(slow==fast)
    break;
}
    if(slow!=fast)
    return NULL;
    slow=A;
    while(slow!=fast)
    {
        slow=slow->next;
        fast=fast->next;
    }
    return slow;
}
